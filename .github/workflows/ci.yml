name: Three-Tier Testing CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Small & Medium Tests - Run before merge
  test-pre-merge:
    name: Pre-Merge Tests (Small + Medium)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: fullstackapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Setup test database
        run: |
          cd backend
          npm run db:setup
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: password
          DB_NAME: fullstackapp_test
          NODE_ENV: test

      - name: Run Small Tests
        run: |
          cd backend
          npm run test:small
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: password
          DB_NAME: fullstackapp_test
          NODE_ENV: test

      - name: Run Medium Tests
        run: |
          cd backend
          npm run test:medium
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: password
          DB_NAME: fullstackapp_test
          NODE_ENV: test

      - name: Generate coverage report
        run: |
          cd backend
          npm run test:ci
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: password
          DB_NAME: fullstackapp_test
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Large Tests - Run after merge to main
  test-post-merge:
    name: Post-Merge E2E Tests (Large)
    runs-on: ubuntu-latest
    needs: test-pre-merge
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: fullstackapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Setup test database
        run: |
          cd backend
          npm run db:setup
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: password
          DB_NAME: fullstackapp_test
          NODE_ENV: test

      - name: Run Large Tests (E2E)
        run: |
          cd backend
          npm run test:large
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: password
          DB_NAME: fullstackapp_test
          NODE_ENV: test

  # Build and Deploy - Only after all tests pass
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-pre-merge, test-post-merge]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Build backend
        run: |
          cd backend
          npm run build
        env:
          NODE_ENV: production

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NODE_ENV: production

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment logic here
          # This could be deploying to AWS, GCP, Azure, etc.
        env:
          NODE_ENV: production

  # Security and Quality Checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run linting
        run: |
          cd backend
          npm run lint
        continue-on-error: true

      - name: Check code formatting
        run: |
          cd backend
          npm run format:check
        continue-on-error: true
